<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.4.RELEASE</version>
		<relativePath/>
	</parent>
	<groupId>com.mywork</groupId>
	<artifactId>parentcould</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>parentcould</name>
	<description> parent project </description>
	
	<modules>
		<module>myEureka</module>
		<module>userService</module>
		<module>gateway</module>
		<module>config_sever</module>
		<module>common_model</module>
		<module>order_service</module>
		<module>stream_service</module>
    <module>common_service</module>
  </modules>
	
	<properties>
		<spring-cloud.version>Greenwich.SR1</spring-cloud.version>
	
	</properties>
	<!-- 管理版本 父项目声明版本可由子项目控制 -->
	<dependencyManagement>
		<dependencies>
	
			
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>common_model</artifactId>
				<version>${project.version}</version>
			</dependency>
			
			
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
	
		 	 <dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-actuator</artifactId>
			</dependency>  
	
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				
				<scope>test</scope>
			</dependency>
		
		<!-- 	<dependency>
				<groupId>net.minidev</groupId>
				<artifactId>asm</artifactId>
				<version>1.0.2</version>
			</dependency>
	
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.12</version>
			</dependency> -->
		
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.25</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>4.0.1</version>
		    <scope>provided</scope>
		</dependency>
	</dependencies>

	
	<build>
		<plugins>
			
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>

				<executions>
					<!-- 绑定 mvn: clean package -->
					 <execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution> 
					<!-- 上传本地私库 -->
					<!-- <execution> <id>image-tag</id> <phase>package</phase> <goals> <goal>tag</goal> 
						// tag命令，相当于docker的tag命令 </goals> <configuration> <image>${image.name}</image> 
						镜像名 <newName>127.0.0.1:5000/${image.name}</newName> 打的标签名 </configuration> 
						</execution> <execution> <id>package-push</id> <phase>package</phase> <goals> 
						<goal>push</goal> 相当于docker的push命令 </goals> <configuration> <imageName>127.0.0.1:5000/${image.name}</imageName> 
						要push的镜像名 </configuration> </execution> -->

				</executions>
				<configuration>
					<forceTags>true</forceTags><!--覆盖相同标签镜像 -->
					<imageName>${image.name}</imageName>  <!--指定镜像名称 仓库/镜像名:标签 -->
					<!-- <baseImage>openjdk-8-jdk-alpine</baseImage>指定基础镜像，相当于dockerFile中的FROM<image> -->
					<dockerHost>http://172.16.13.46:2375</dockerHost>  <!-- 指定仓库地址 -->
					<!-- <entryPoint>["java","-jar","/${project.build.finalName}.jar"]</entryPoint> 
						容器启动执行的命令，相当于dockerFile的ENTRYPOINT -->
					<dockerDirectory>${project.basedir}/src/main/resources</dockerDirectory>   <!--dockerfile文件路径 -->
					<resources>
						<resource>
                                           <!-- 指定资源文件 -->
							<targetPath>/</targetPath>
							                         <!-- 指定要复制的目录路径，这里是当前目录 -->
							<directory>${project.build.directory}</directory>  <!-- 指定要复制的根目录，这里是target目录 -->
							<include>${project.build.finalName}.jar</include>  <!-- 指定需要拷贝的文件，这里指最后生成的jar包 -->
						</resource>
					</resources>
					<serverId>docker-hub</serverId>
				</configuration>
			</plugin>

		</plugins>
	</build>
</project>